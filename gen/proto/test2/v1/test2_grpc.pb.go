// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: test2/v1/test2.proto

package test2pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Test2Service_Hello2_FullMethodName = "/test2.Test2Service/Hello2"
)

// Test2ServiceClient is the client API for Test2Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Test2ServiceClient interface {
	Hello2(ctx context.Context, in *Hello2Request, opts ...grpc.CallOption) (*Hello2Response, error)
}

type test2ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTest2ServiceClient(cc grpc.ClientConnInterface) Test2ServiceClient {
	return &test2ServiceClient{cc}
}

func (c *test2ServiceClient) Hello2(ctx context.Context, in *Hello2Request, opts ...grpc.CallOption) (*Hello2Response, error) {
	out := new(Hello2Response)
	err := c.cc.Invoke(ctx, Test2Service_Hello2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Test2ServiceServer is the server API for Test2Service service.
// All implementations must embed UnimplementedTest2ServiceServer
// for forward compatibility
type Test2ServiceServer interface {
	Hello2(context.Context, *Hello2Request) (*Hello2Response, error)
	mustEmbedUnimplementedTest2ServiceServer()
}

// UnimplementedTest2ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTest2ServiceServer struct {
}

func (UnimplementedTest2ServiceServer) Hello2(context.Context, *Hello2Request) (*Hello2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello2 not implemented")
}
func (UnimplementedTest2ServiceServer) mustEmbedUnimplementedTest2ServiceServer() {}

// UnsafeTest2ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Test2ServiceServer will
// result in compilation errors.
type UnsafeTest2ServiceServer interface {
	mustEmbedUnimplementedTest2ServiceServer()
}

func RegisterTest2ServiceServer(s grpc.ServiceRegistrar, srv Test2ServiceServer) {
	s.RegisterService(&Test2Service_ServiceDesc, srv)
}

func _Test2Service_Hello2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hello2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Test2ServiceServer).Hello2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Test2Service_Hello2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Test2ServiceServer).Hello2(ctx, req.(*Hello2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Test2Service_ServiceDesc is the grpc.ServiceDesc for Test2Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Test2Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test2.Test2Service",
	HandlerType: (*Test2ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello2",
			Handler:    _Test2Service_Hello2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test2/v1/test2.proto",
}
