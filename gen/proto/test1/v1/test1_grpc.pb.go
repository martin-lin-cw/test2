// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: test1/v1/test1.proto

package test1pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Test1Service_Hello1_FullMethodName = "/test1.Test1Service/Hello1"
)

// Test1ServiceClient is the client API for Test1Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Test1ServiceClient interface {
	Hello1(ctx context.Context, in *Hello1Request, opts ...grpc.CallOption) (*Hello1Response, error)
}

type test1ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTest1ServiceClient(cc grpc.ClientConnInterface) Test1ServiceClient {
	return &test1ServiceClient{cc}
}

func (c *test1ServiceClient) Hello1(ctx context.Context, in *Hello1Request, opts ...grpc.CallOption) (*Hello1Response, error) {
	out := new(Hello1Response)
	err := c.cc.Invoke(ctx, Test1Service_Hello1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Test1ServiceServer is the server API for Test1Service service.
// All implementations must embed UnimplementedTest1ServiceServer
// for forward compatibility
type Test1ServiceServer interface {
	Hello1(context.Context, *Hello1Request) (*Hello1Response, error)
	mustEmbedUnimplementedTest1ServiceServer()
}

// UnimplementedTest1ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTest1ServiceServer struct {
}

func (UnimplementedTest1ServiceServer) Hello1(context.Context, *Hello1Request) (*Hello1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello1 not implemented")
}
func (UnimplementedTest1ServiceServer) mustEmbedUnimplementedTest1ServiceServer() {}

// UnsafeTest1ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Test1ServiceServer will
// result in compilation errors.
type UnsafeTest1ServiceServer interface {
	mustEmbedUnimplementedTest1ServiceServer()
}

func RegisterTest1ServiceServer(s grpc.ServiceRegistrar, srv Test1ServiceServer) {
	s.RegisterService(&Test1Service_ServiceDesc, srv)
}

func _Test1Service_Hello1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hello1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Test1ServiceServer).Hello1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Test1Service_Hello1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Test1ServiceServer).Hello1(ctx, req.(*Hello1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Test1Service_ServiceDesc is the grpc.ServiceDesc for Test1Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Test1Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test1.Test1Service",
	HandlerType: (*Test1ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello1",
			Handler:    _Test1Service_Hello1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test1/v1/test1.proto",
}
